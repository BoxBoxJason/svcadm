# Configure general settings for the services
general:
  # Set the services directory, path must be absolute
  directory: "${HOME}/services"

  # Configure the access control for the services
  access:
    # Path to the logins file (will be encrypted if encryption is enabled)
    # Path must be either absolute or relative to the services directory
    logins: "/home/boxboxjason/.svcadm/access.yaml"
    # Configure the encryption for the access control
    encryption:
      enabled: false
      # Path to the encryption key file
      # Path must be either absolute or relative to the services directory
      key: "./access/key"
      # Path to the encryption salt file
      # Path must be either absolute or relative to the services directory
      salt: "./access/salt"

  # Configure the container runtime operator
  operator:
    # Can use "docker" or "podman"
    name: "podman"
    # Services network configuration
    network:
      driver: "bridge" # Not recommended to change this value
      name: "svcadm" # Container network name

  containers:
    labels: {}

# Configure the services to be managed
services:
  - name: postgresql
    # PostgreSQL must be enabled for the following services to work: gitlab, mattermost, sonarqube, vaultwarden
    enabled: true
    image:
      repository: "docker.io/library/postgres"
      tag: "15"
    container:
      name: "postgresql"
      # Configure the forwarded ports for postgresql, values must be "host:container" format
      ports: {}
      restart: "always"
    nginx: false
    persistence:
      enabled: true
      # Configure the volume name for postgresql
      volumes:
        postgresql_data: "/var/lib/postgresql/data"
    backup:
      enabled: true
      frequency: "daily"
      retention: 7
      # Backup location, path must be either absolute or relative to the services directory
      location: "./postgresql/backup"

  - name: sonarqube
    enabled: true
    image:
      repository: "docker.io/library/sonarqube"
      tag: "community"
    container:
      name: "sonarqube"
      # Configure the forwarded ports for sonarqube, values must be "host:container" format
      ports: {}
      restart: "always"
    nginx: true
    persistence:
      enabled: true
      # Configure the volumes for sonarqube, leave empty to disable unwanted volumes
      volumes:
        sonarqube_data: "/opt/sonarqube/data"
        sonarqube_extensions: "/opt/sonarqube/extensions"
        sonarqube_logs: "/opt/sonarqube/logs"
    backup:
      enabled: true
      frequency: "daily"
      retention: 7
      location: "./sonarqube/backup"

  - name: minio
    enabled: true
    image:
      repository: "docker.io/minio/minio"
      tag: "latest"
    container:
      name: "minio"
      # Configure the forwarded ports for minio, values must be "host:container" format
      ports: {}
      restart: "always"
      # Configure the environment variables for minio
      env:
    nginx: true
    persistence:
      enabled: true
      # Configure the volume name for minio
      volumes:
        minio_data: "/data"
    backup:
      enabled: true
      frequency: "daily"
      retention: 7
      location: "./minio/backup"


  - name: nginx
    enabled: true
    image:
      repository: "docker.io/library/nginx"
      tag: "stable-alpine"
    container:
      name: "nginx"
      # Configure the forwarded ports for nginx, values must be "host:container" format
      ports:
        80: 80
        443: 443
      restart: "always"
    persistence:
      enabled: true
      # Configure the volumes for nginx, leave empty to disable unwanted volumes
      volumes:
        # Path to the SSL certificate and key files (left: host machine, right: container must not be changed)
        "/etc/ssl/certs/svcadm.crt": "/etc/ssl/certs/svcadm.crt:Z"
        "/etc/ssl/private/svcadm.key": "/etc/ssl/private/svcadm.key:Z"

  - name: clamav
    enabled: false
    image:
      repository: "docker.io/clamav/clamav"
      tag: "latest"
    container:
      name: "clamav"
      # Configure the forwarded ports for clamav, values must be "host:container" format
      ports: {}
      restart: "always"
    nginx: true

  - name: gitlab
    enabled: true
    image:
      repository: "docker.io/gitlab/gitlab-ce"
      tag: "latest"
    container:
      name: "gitlab"
      # Configure the forwarded ports for gitlab, values must be "host:container" format
      ports: {}
      restart: "always"
    nginx: true
    persistence:
      enabled: true
      # Configure the volumes for gitlab, leave empty to disable unwanted volumes
      volumes:
        gitlab_config: "/etc/gitlab"
        gitlab_data: "/var/opt/gitlab"
        gitlab_logs: "/var/log/gitlab"
    backup:
      enabled: true
      frequency: "daily"
      retention: 7
      location: "./gitlab/backup"

  - name: mattermost
    enabled: true
    image:
      repository: "docker.io/mattermost/mattermost-team-edition"
      tag: "latest"
    container:
      name: "mattermost"
      # Configure the forwarded ports for mattermost, values must be "host:container" format
      ports: {}
      restart: "always"
      env:
        MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL: "false"
    nginx: true
    persistence:
      enabled: true
      # Configure the volumes for mattermost, leave empty to disable unwanted volumes
      volumes:
        mattermost_data: "/mattermost/data"
        mattermost_config: "/mattermost/config"
        mattermost_plugins: "/mattermost/plugins"
        mattermost_logs: "/mattermost/logs"
        mattermost_client_plugins: "/mattermost/client/plugins"
    backup:
      enabled: true
      frequency: "daily"
      retention: 7
      location: "./mattermost/backup"

  - name: trivy
    enabled: true
    image:
      repository: "docker.io/aquasec/trivy"
      tag: "latest"
    container:
      name: "trivy"
      # Configure the forwarded ports for trivy, values must be "host:container" format
      ports: {}
      restart: "always"
    nginx: true

  - name: vault
    enabled: true
    image:
      repository: "docker.io/hashicorp/vault"
      tag: "latest"
    container:
      name: "vault"
      # Configure the forwarded ports for vault, values must be "host:container" format
      ports: {}
      restart: "always"
      env:
        VAULT_LOCAL_CONFIG: '{"storage": {"file": {"path": "/vault/file"}}, "listener": [{"tcp": { "address": "0.0.0.0:8200", "tls_disable": true}}], "default_lease_ttl": "168h", "max_lease_ttl": "720h", "ui": true}'
    nginx: true
    persistence:
      enabled: true
      # Configure the volumes for vault, leave empty to disable unwanted volumes
      volumes:
        vault_config: "/vault/config.d"
        vault_file: "/vault/file"
        vault_logs: "/vault/logs"
    backup:
      enabled: true
      frequency: "daily"
      retention: 7
      location: "./vault/backup"
